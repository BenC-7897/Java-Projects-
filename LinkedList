public class LinkedList<T> {

	private Node<T> head;  // head of list
	private Node<T> tail;  // tail of list

	private static class Node<T> { // data type for the list nodes
		T item;
		Node<T> next;
		public Node (T item) {
		this.item = item; 
		this.next = null; 
		}
	}
	public int count(T item) { 
		int count = 0; 
		Node<T> current = head;
		while (current != null) {
		if (current.item.equals(item)) {
		count++; 
		}
		current = current.next;
		}
		return count; 
	}
	public int removeAll(T item) { 
		int removal = 0; 
		if (head == null ) {
		return removal; 
		}
		while (head!=null && head.item.equals(item)) {
		head = head.next; 
		removal++; 
		}
		Node<T> current = head; 
		while (current != null && current.next !=null) {
			if (current.next.item.equals(item)) {
			current.next = current.next.next; 
			removal++; 
			}
			else current = current.next;
			}
			return removal;
	}

	
	public static void main(String args[]) {
		LinkedList<String> List = new LinkedList<>();
        List.insertHead("Three");
        List.insertHead("Seven");
        List.insertHead("Five");
        List.insertHead("Five");
        List.insertHead("Nine");
        List.insertHead("Five");
        
        System.out.println("Count of 5 in list: " + List.count("Five"));  
        System.out.println("Count of 3 in list: " + List.count("Three"));  
        System.out.println("Count of 10 in list: " + List.count("Ten"));  
    

	
        System.out.println("Original List: " + List); 
        int removal_variable = List.removeAll("Ten"); 
        System.out.println("New List: " + List); 
	}
	//////////////////////////////////////////////////////////
	
	public LinkedList() {
		clear();
	}

	public void clear() {
		head = null;
		tail = null;
	}

	@Override
	public String toString() {
		String s = "";
		Node<T> tmp = head;
		while (tmp != null) {
			s += tmp.item.toString() + " -> ";
			tmp = tmp.next;
		}
		s += "[NULL]";
		return s;
	}

	// Inserting a new node at head end of list
	public void insertHead(T item) {
		Node<T> newNode = new Node<T>(item);
		newNode.item = item;
		newNode.next = head;
		if (head == tail) tail = newNode;
		head = newNode;
	}

	// Inserting a new node at tail end of list
	public void insertTail(T item) {
		Node<T> newNode = new Node<T>(item);
		newNode.item = item;
		if (head == null) {  // list empty
			tail = newNode;
			head = tail;
		}
		else {
			tail.next = newNode;
			tail = newNode;
		}
	}

	// Removing the node at the head of the list
	public T removeHead() {
		if (head == null) return null;  // list empty
		T item = head.item;
		head = head.next;
		if (head == null) tail = null;
		return item;
	}

	// Removing the node at the tail of the list
	public T removeTail() {
		if (head == null) return null;	// list empty
		Node<T> tmp = head;
		Node<T> prev = null;
		while (tmp != tail) {			// iterate until prev refers to
			prev = tmp;					// to the node before tail node
			tmp = tmp.next;
		}
		T item = tail.item;
		if (prev == null)				// list has only one element
			head = null;				// list now empty
		else
			prev.next = null;			// removes tail
		tail = prev;					// set new tail
		return item;
	}

	// Remove a given element of the list
	// (If multiple nodes with the given value, node closest to head is removed)
	public boolean remove(T key) {
		Node<T> tmp = head;
		Node<T> prev = null;
		while (tmp!=null && !tmp.item.equals(key)) {
			prev = tmp;
			tmp = tmp.next;
		}
		if (tmp == null) return false; 	// key not found
		else if (tmp == head)	 		// key is first element
			head = head.next;	 		// remove first element
		else							// key found at tmp
			prev.next = tmp.next;   	// remove tmp node
		if (tmp == tail) tail = prev;   // tail was removed
		return true;
	}

}
